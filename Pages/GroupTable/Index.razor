@namespace BlazorAntdProApp.Pages.GroupTable
@page "/group-table"
@using BlazorAntdProApp.Models.GroupTable
@using System.ComponentModel
@implements IAsyncDisposable


<Table DataSource="@_formatedTableData" HidePagination
       Bordered>
    <ColumnDefinitions>
        <PropertyColumn Property="c=>c.Carrier" />
        <PropertyColumn Property="c=>c.OriginPort" />
        <PropertyColumn Property="c=>c.DestinationPort" />
        <PropertyColumn Property="c=>c.Routing" />
        <PropertyColumn Property="c=>c.DestinationDoor" />
        <PropertyColumn Property="c=>c.Door" />
        <PropertyColumn Property="c=>c.DoorRate" />
        <PropertyColumn Property="c=>c.Transit" />
        <PropertyColumn Property="c=>c.Commodity" />
        <PropertyColumn Property="c=>c.ContainerSize" />
        <PropertyColumn Property="c=>c.NewOceanFreight" />
        <PropertyColumn Property="c=>c.CurrentOceanFreight" />
        <PropertyColumn Property="c=>c.NewBafLss" />
        <PropertyColumn Property="c=>c.CurrentBafLss" />
        <PropertyColumn Property="c=>c.NewDps" />
        <PropertyColumn Property="c=>c.NewTotal" />
        <PropertyColumn Property="c=>c.CurrentTotal" />
    </ColumnDefinitions>
    <ExpandTemplate Context="rowData">
        <Table DataSource="rowData.Data.ExtraDataList" HidePagination>
            <PropertyColumn Property="c=>c.TMF" />
            <PropertyColumn Property="c=>c.ISP" />
            <PropertyColumn Property="c=>c.AMS" />
            <PropertyColumn Property="c=>c.ADD" />
            <PropertyColumn Property="c=>c.ARR" />
            <PropertyColumn Property="c=>c.PSS" />
            <PropertyColumn Property="c=>c.CRF" />
        </Table>
    </ExpandTemplate>
</Table>
<div id="load-more-trigger"></div>

<Button Id="js-trigger" Type="@ButtonType.Primary">js-trigger</Button>
<Button id="xx" OnClick="handleLoadMore">Load More</Button>

@code {
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}


<script>
    class GroupTableHelper {
        static dotNetHelper;

        static setDotNetHelper(value) {
            GroupTableHelper.dotNetHelper = value;
        }


        static async loadMore() {
          await  GroupTableHelper.dotNetHelper.invokeMethodAsync('loadMoreForJs')
        }
    }
    window.GroupTableHelper = GroupTableHelper;



    // create IntersectionObserver instance
    const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
            //  check element visible
            if (entry.intersectionRatio > 0) {
                console.log('visible');
                GroupTableHelper.loadMore();
            }
        });
    }, { threshold: [0, 0.25, 0.5, 0.75, 1] });

    // observer action
    observer.observe(document.getElementById('load-more-trigger'));

   
</script>