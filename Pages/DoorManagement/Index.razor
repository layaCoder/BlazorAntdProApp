@namespace BlazorAntdProApp.Pages.DoorManagement
@page "/door-management"

@using AntDesign.TableModels
@using System.ComponentModel.DataAnnotations


<Flex Justify="space-between" Gap="10" style="padding-top:10px;padding-bottom:10px;padding-right:10px;">
    <div>
        <Search Placeholder="Input Search Text" WrapperStyle="margin-left:10px; width: 200px;" AllowClear />
        <Select TItem="string"
                TItemValue="string"
                Placeholder="Active"
                Style="max-width: 220px;"
                AllowClear="true">
            <SelectOptions>
                <SelectOption TItem="string" TItemValue="string" Label="True" />
                <SelectOption TItem="string" TItemValue="string" Label="False" />
            </SelectOptions>
        </Select>
    </div>
    <div>
        <Button Type="primary" @onclick="()=> StartEdit(default)" Class="btn-new" Style="background:#0D76BD;color:#fff;">New</Button>
        <Button Disabled="!_selectedRows.Any()"
                Class="btn-delete"
                Danger @onclick="DeleteAll">

            Delete
        </Button>
    </div>
</Flex>
<Table @ref="_table" TItem="ItemData" PageSize="5" Total="_total" DataSource="_dataSource" @bind-SelectedRows="_selectedRows" OnChange="OnChange">

    <ColumnDefinitions Context="row">
        <Selection HeaderStyle="@tableHeaderStyle" />
        <PropertyColumn Property="c=>c.Name" HeaderStyle="@tableHeaderStyle">
            <div>@row.Name</div>
        </PropertyColumn>
        <PropertyColumn Property="c=>c.DestinationPort" HeaderStyle="@tableHeaderStyle" />
        <PropertyColumn Property="c=>c.DestinationDoor" HeaderStyle="@tableHeaderStyle" />
        <PropertyColumn Property="c=>c.Profits" HeaderStyle="@tableHeaderStyle" />
        <PropertyColumn Property="c=>c.Active" HeaderStyle="@tableHeaderStyle" />
        <ActionColumn Align="ColumnAlign.Center" Title="Action" HeaderStyle="@tableHeaderStyle">
            <a @onclick="() => StartEdit(row)" style="color:#0D76BD;">Edit</a>
            <a @onclick="() => Delete(row)" style="color:#B0282F;margin-left:10px;">Delete</a>
        </ActionColumn>
    </ColumnDefinitions>
</Table>

@inject ModalService ModalService;
@inject ConfirmService ComfirmService;
@code {
    List<ItemData> mockDb = new();
    IEnumerable<ItemData> _selectedRows = [];
    ITable _table;
    List<ItemData> _dataSource;
    int _total;

    string tableHeaderStyle = "background:#275594;color:#fff;";

    private string getCellColor(int currentValue, int newValue)
    {
        return currentValue > newValue ? "red" : "green";
    }

    void OnChange(QueryModel<ItemData> query)
    {
        _total = mockDb.AsQueryable().ExecuteTableQuery(query).Count();
        _dataSource = mockDb.AsQueryable().ExecuteTableQuery(query).CurrentPagedRecords(query).ToList();
    }

    void StartEdit(ItemData row)
    {
        var data = row == null ? new() : row with { };
        ModalRef<bool> modalRef = default;
        IForm form = default;
        modalRef = ModalService.CreateModal<bool>(new()
                {
                    Title = data.Id > 0 ? "Edit" : "New",
                    Content = @<Form @ref="form" Model="data" OnFinish="()=> modalRef.OkAsync(true)" LabelColSpan="6" WrapperColSpan="18">
        <FormItem Label="Name">
            <Input @bind-Value="@context.Name" />
        </FormItem>
        <FormItem Label="User No">
            <Input @bind-Value="@context.DestinationPort" />
        </FormItem>

        <FormItem Label="Gender">
            <Select TItem="string"
                    TItemValue="string"
                    Style="max-width: 220px;"
                    @bind-Value="@context.DestinationDoor">
                <SelectOptions>
                    <SelectOption TItem="string" TItemValue="string" Value="@("1")" Label="Male" />
                    <SelectOption TItem="string" TItemValue="string" Value="@("2")" Label="Female" />
                </SelectOptions>
            </Select>
        </FormItem>
    </Form>
    ,
            OnOk = async (e) =>
            {
                if (!form.Validate())
                {
                    return;
                }

                // save db and refresh
                modalRef.SetConfirmLoading(true);

                if (data.Id > 0)
                {
                    var index = mockDb.FindIndex(x => x.Id == data.Id);
                    mockDb[index] = data;
                }
                else
                {
                    data.Id = mockDb.Max(x => x.Id) + 1;
                    mockDb.Add(data);
                }

                await Task.Delay(1000);

                await modalRef.CloseAsync();
                _table.ReloadData();
                StateHasChanged();
            },
            OnCancel = async (e) =>
            {
                if (form.IsModified && (!await Comfirm("The form have been updated, are you sure quit?")))
                {
                    return;
                }
                await modalRef.CloseAsync();
            }
        });
    }

    async Task DeleteAll()
    {
        if (!await Comfirm($"Are you sure delete {_selectedRows.Count()} rows?"))
            return;

        mockDb = mockDb.Except(_selectedRows).ToList();
        _selectedRows = [];
        _table.ReloadData();
    }

    async Task Delete(ItemData row)
    {
        if (!await Comfirm($"Are you sure delete [{row.Name}]?"))
            return;

        mockDb = mockDb.Except(new[] { row }).ToList();
        _table.ReloadData();
    }

    protected override async void OnInitialized()
    {
        mockDb = Enumerable.Range(0, 5).Select(i =>
        {
            return new ItemData { Id = i + 1, Name = "Evans, Dallas" + i.ToString(), DestinationPort = $"{"Dallas, TX" + 1}", DestinationDoor = $"{"Saltillo, TX 75457 (EVANS)"}", Profits = "1000", Active = true };
        }).ToList();


        // var users= await _blazorUserService.getAllBlazorUser();
        // Console.WriteLine(users);
    }

    private async Task<bool> Comfirm(string message)
    {
        return await ComfirmService.Show(message, "Confirm", ConfirmButtons.YesNo, ConfirmIcon.Warning) == ConfirmResult.Yes;
    }





    record ItemData
    {
        public int Id { get; set; }
        [Required]
        public string Name { get; set; }
        public string DestinationPort { get; set; }
        public string DestinationDoor { get; set; }
        public string Profits { get; set; }
        public bool Active { get; set; }
    }

}